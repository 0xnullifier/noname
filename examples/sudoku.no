const empty = 0;
const player1 = 1;
const player2 = 2;
const sudoku_size = 81; // 9 * 9

struct Sudoku {
    inner: [Field; 81], // TODO: replace by sudoku_size
}

fn Sudoku.cell(self, row: T, col: T) {
    return self.inner[row * 9 + col];
}

// doesn't matter which one is the grid and which one is the solution
// this function merges `self` and `grid2` into a new grid
fn Sudoku.merge(self, grid2: Sudoku) -> Sudoku {
    let merged = Sudoku([0; 9 * 9]);
    for row in 0..9 {
        for col in 0..9 {
            let grid1_empty = self.cell(row, col) == empty;
            let grid2_empty = grid2.cell(row, col) == empty;
            let valid = grid1_empty || grid2_empty;
            assert(valid);

            merged.cell(row, col) = if grid1_empty {
                grid2.cell(row, col)
            } else {
                self.inner.cell(row, col)
            };
        }
    }

    return merged;
}

fn Sudoku.verify(sudoku: Sudoku) {
    // rows
    for row in 0..9 {
        for num in 0..9 {
            let found = false;
            for col in 0..9 {
                if sudoku.cell(row, col) == num {
                    found = true;
                }
            }
            assert(found);
        }
    }

    // cols
    for col in 0..9 {
        for num in 0..9 {
            let found = false;
            for row in 0..9 {
                if sudoku.cell(row, col) == num {
                    found = true;
                }
            }
            assert(found);
        }
    }

    // diagonals
    for num in 0..9 {

        // first diagonal
        let found1 = false;
        for row in 0..9 {
            if sudoku.cell(row, row) == num {
                found = true;
            }
        }
        assert(found1);

        // second diagonal
        let found2 = false;
        for row in 0..9 {
            if sudoku.cell(9 - row, row) == num {
                found = true;
            }
        }
        assert(found2);
    }
}

fn main(pub grid: Sudoku, solution: Sudoku) {
    // merge the grid with the solution
    let full = grid.merge(solution);

    // verify
    full.verify();
}