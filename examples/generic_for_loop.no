fn join(arr1: [Field; N], arr2: [Field; M]) -> [Field; N + M] {
    let mut arr = [0; N + M];
    for ii in 0..N {
        arr[ii] = arr1[ii];
    }

    //for jj in N..M {
    //    arr[jj] = arr2[jj];// howcome this doesn't throw out of bound error?
    //}
    for jj in 0..M {
        arr[jj + N] = arr2[jj];
    }

    return arr;
}

fn main(pub xx: Field) {
    let arr1 = [xx + 1, xx + 2];
    let arr2 = [xx + 3, xx + 4];
    
    let arr = join(arr1, arr2);

    assert_eq(arr[0], arr1[0]);
    assert_eq(arr[1], arr1[1]);
    assert_eq(arr[2], arr2[0]);
    assert_eq(arr[3], arr2[1]);
}